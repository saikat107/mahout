[
    {
        "api": "DataFrame",
        "doc": "Two-dimensional  size-mutable  potentially heterogeneous tabular data.",
        "category": "Constructor"
    },
    {
        "api": "index",
        "doc": "The index (row labels) of the DataFrame.",
        "category": "Attributes and underlying data"
    },
    {
        "api": "columns",
        "doc": "The column labels of the DataFrame.",
        "category": "Attributes and underlying data"
    },
    {
        "api": "dtypes",
        "doc": "Return the dtypes in the DataFrame.",
        "category": "Attributes and underlying data"
    },
    {
        "api": "info",
        "doc": "Print a concise summary of a DataFrame.",
        "category": "Attributes and underlying data"
    },
    {
        "api": "select_dtypes",
        "doc": "Return a subset of the DataFrames columns based on the column dtypes.",
        "category": "Attributes and underlying data"
    },
    {
        "api": "values",
        "doc": "Return a Numpy representation of the DataFrame.",
        "category": "Attributes and underlying data"
    },
    {
        "api": "axes",
        "doc": "Return a list representing the axes of the DataFrame.",
        "category": "Attributes and underlying data"
    },
    {
        "api": "ndim",
        "doc": "Return an int representing the number of axes / array dimensions.",
        "category": "Attributes and underlying data"
    },
    {
        "api": "size",
        "doc": "Return an int representing the number of elements in this object.",
        "category": "Attributes and underlying data"
    },
    {
        "api": "shape",
        "doc": "Return a tuple representing the dimensionality of the DataFrame.",
        "category": "Attributes and underlying data"
    },
    {
        "api": "memory_usage",
        "doc": "Return the memory usage of each column in bytes.",
        "category": "Attributes and underlying data"
    },
    {
        "api": "empty",
        "doc": "Indicator whether DataFrame is empty.",
        "category": "Attributes and underlying data"
    },
    {
        "api": "set_flags",
        "doc": "Return a new object with updated flags.",
        "category": "Attributes and underlying data"
    },
    {
        "api": "astype",
        "doc": "Cast a pandas object to a specified dtype dtype.",
        "category": "Conversion"
    },
    {
        "api": "convert_dtypes",
        "doc": "Convert columns to best possible dtypes using dtypes supporting pd.NA.",
        "category": "Conversion"
    },
    {
        "api": "infer_objects",
        "doc": "Attempt to infer better dtypes for object columns.",
        "category": "Conversion"
    },
    {
        "api": "copy",
        "doc": "Make a copy of this objects indices and data.",
        "category": "Conversion"
    },
    {
        "api": "bool",
        "doc": "Return the bool of a single element Series or DataFrame.",
        "category": "Conversion"
    },
    {
        "api": "head",
        "doc": "Return the first n rows.",
        "category": "Indexing  iteration"
    },
    {
        "api": "at",
        "doc": "Access a single value for a row/column label pair.",
        "category": "Indexing  iteration"
    },
    {
        "api": "iat",
        "doc": "Access a single value for a row/column pair by integer position.",
        "category": "Indexing  iteration"
    },
    {
        "api": "loc",
        "doc": "Access a group of rows and columns by label(s) or a boolean array.",
        "category": "Indexing  iteration"
    },
    {
        "api": "iloc",
        "doc": "Purely integer-location based indexing for selection by position.",
        "category": "Indexing  iteration"
    },
    {
        "api": "insert",
        "doc": "Insert column into DataFrame at specified location.",
        "category": "Indexing  iteration"
    },
    {
        "api": "__iter__",
        "doc": "Iterate over info axis.",
        "category": "Indexing  iteration"
    },
    {
        "api": "items",
        "doc": "Iterate over (column name  Series) pairs.",
        "category": "Indexing  iteration"
    },
    {
        "api": "iteritems",
        "doc": "Iterate over (column name  Series) pairs.",
        "category": "Indexing  iteration"
    },
    {
        "api": "keys",
        "doc": "Get the info axis (see Indexing for more).",
        "category": "Indexing  iteration"
    },
    {
        "api": "iterrows",
        "doc": "Iterate over DataFrame rows as (index  Series) pairs.",
        "category": "Indexing  iteration"
    },
    {
        "api": "itertuples",
        "doc": "Iterate over DataFrame rows as namedtuples.",
        "category": "Indexing  iteration"
    },
    {
        "api": "lookup",
        "doc": "(DEPRECATED) Label-based fancy indexing function for DataFrame.",
        "category": "Indexing  iteration"
    },
    {
        "api": "pop",
        "doc": "Return item and drop from frame.",
        "category": "Indexing  iteration"
    },
    {
        "api": "tail",
        "doc": "Return the last n rows.",
        "category": "Indexing  iteration"
    },
    {
        "api": "xs",
        "doc": "Return cross-section from the Series/DataFrame.",
        "category": "Indexing  iteration"
    },
    {
        "api": "get",
        "doc": "Get item from object for given key (ex: DataFrame column).",
        "category": "Indexing  iteration"
    },
    {
        "api": "isin",
        "doc": "Whether each element in the DataFrame is contained in values.",
        "category": "Indexing  iteration"
    },
    {
        "api": "where",
        "doc": "Replace values where the condition is False.",
        "category": "Indexing  iteration"
    },
    {
        "api": "mask",
        "doc": "Replace values where the condition is True.",
        "category": "Indexing  iteration"
    },
    {
        "api": "query",
        "doc": "Query the columns of a DataFrame with a boolean expression.",
        "category": "Indexing  iteration"
    },
    {
        "api": "add",
        "doc": "Get Addition of dataframe and other  element-wise (binary operator add).",
        "category": "Binary operator functions"
    },
    {
        "api": "sub",
        "doc": "Get Subtraction of dataframe and other  element-wise (binary operator sub).",
        "category": "Binary operator functions"
    },
    {
        "api": "mul",
        "doc": "Get Multiplication of dataframe and other  element-wise (binary operator mul).",
        "category": "Binary operator functions"
    },
    {
        "api": "div",
        "doc": "Get Floating division of dataframe and other  element-wise (binary operator truediv).",
        "category": "Binary operator functions"
    },
    {
        "api": "truediv",
        "doc": "Get Floating division of dataframe and other  element-wise (binary operator truediv).",
        "category": "Binary operator functions"
    },
    {
        "api": "floordiv",
        "doc": "Get Integer division of dataframe and other  element-wise (binary operator floordiv).",
        "category": "Binary operator functions"
    },
    {
        "api": "mod",
        "doc": "Get Modulo of dataframe and other  element-wise (binary operator mod).",
        "category": "Binary operator functions"
    },
    {
        "api": "pow",
        "doc": "Get Exponential power of dataframe and other  element-wise (binary operator pow).",
        "category": "Binary operator functions"
    },
    {
        "api": "dot",
        "doc": "Compute the matrix multiplication between the DataFrame and other.",
        "category": "Binary operator functions"
    },
    {
        "api": "radd",
        "doc": "Get Addition of dataframe and other  element-wise (binary operator radd).",
        "category": "Binary operator functions"
    },
    {
        "api": "rsub",
        "doc": "Get Subtraction of dataframe and other  element-wise (binary operator rsub).",
        "category": "Binary operator functions"
    },
    {
        "api": "rmul",
        "doc": "Get Multiplication of dataframe and other  element-wise (binary operator rmul).",
        "category": "Binary operator functions"
    },
    {
        "api": "rdiv",
        "doc": "Get Floating division of dataframe and other  element-wise (binary operator rtruediv).",
        "category": "Binary operator functions"
    },
    {
        "api": "rtruediv",
        "doc": "Get Floating division of dataframe and other  element-wise (binary operator rtruediv).",
        "category": "Binary operator functions"
    },
    {
        "api": "rfloordiv",
        "doc": "Get Integer division of dataframe and other  element-wise (binary operator rfloordiv).",
        "category": "Binary operator functions"
    },
    {
        "api": "rmod",
        "doc": "Get Modulo of dataframe and other  element-wise (binary operator rmod).",
        "category": "Binary operator functions"
    },
    {
        "api": "rpow",
        "doc": "Get Exponential power of dataframe and other  element-wise (binary operator rpow).",
        "category": "Binary operator functions"
    },
    {
        "api": "lt",
        "doc": "Get Less than of dataframe and other  element-wise (binary operator lt).",
        "category": "Binary operator functions"
    },
    {
        "api": "gt",
        "doc": "Get Greater than of dataframe and other  element-wise (binary operator gt).",
        "category": "Binary operator functions"
    },
    {
        "api": "le",
        "doc": "Get Less than or equal to of dataframe and other  element-wise (binary operator le).",
        "category": "Binary operator functions"
    },
    {
        "api": "ge",
        "doc": "Get Greater than or equal to of dataframe and other  element-wise (binary operator ge).",
        "category": "Binary operator functions"
    },
    {
        "api": "ne",
        "doc": "Get Not equal to of dataframe and other  element-wise (binary operator ne).",
        "category": "Binary operator functions"
    },
    {
        "api": "eq",
        "doc": "Get Equal to of dataframe and other  element-wise (binary operator eq).",
        "category": "Binary operator functions"
    },
    {
        "api": "combine",
        "doc": "Perform column-wise combine with another DataFrame.",
        "category": "Binary operator functions"
    },
    {
        "api": "combine_first",
        "doc": "Update null elements with value in the same location in other.",
        "category": "Binary operator functions"
    },
    {
        "api": "apply",
        "doc": "Apply a function along an axis of the DataFrame.",
        "category": "Function application  GroupBy & window"
    },
    {
        "api": "applymap",
        "doc": "Apply a function to a Dataframe elementwise.",
        "category": "Function application  GroupBy & window"
    },
    {
        "api": "pipe",
        "doc": "Apply func(self  *args  **kwargs).",
        "category": "Function application  GroupBy & window"
    },
    {
        "api": "agg",
        "doc": "Aggregate using one or more operations over the specified axis.",
        "category": "Function application  GroupBy & window"
    },
    {
        "api": "aggregate",
        "doc": "Aggregate using one or more operations over the specified axis.",
        "category": "Function application  GroupBy & window"
    },
    {
        "api": "transform",
        "doc": "Call func on self producing a DataFrame with transformed values.",
        "category": "Function application  GroupBy & window"
    },
    {
        "api": "groupby",
        "doc": "Group DataFrame using a mapper or by a Series of columns.",
        "category": "Function application  GroupBy & window"
    },
    {
        "api": "rolling",
        "doc": "Provide rolling window calculations.",
        "category": "Function application  GroupBy & window"
    },
    {
        "api": "expanding",
        "doc": "Provide expanding transformations.",
        "category": "Function application  GroupBy & window"
    },
    {
        "api": "ewm",
        "doc": "Provide exponential weighted (EW) functions.",
        "category": "Function application  GroupBy & window"
    },
    {
        "api": "abs",
        "doc": "Return a Series/DataFrame with absolute numeric value of each element.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "all",
        "doc": "Return whether all elements are True  potentially over an axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "any",
        "doc": "Return whether any element is True  potentially over an axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "clip",
        "doc": "Trim values at input threshold(s).",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "corr",
        "doc": "Compute pairwise correlation of columns  excluding NA/null values.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "corrwith",
        "doc": "Compute pairwise correlation.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "count",
        "doc": "Count non-NA cells for each column or row.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "cov",
        "doc": "Compute pairwise covariance of columns  excluding NA/null values.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "cummax",
        "doc": "Return cumulative maximum over a DataFrame or Series axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "cummin",
        "doc": "Return cumulative minimum over a DataFrame or Series axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "cumprod",
        "doc": "Return cumulative product over a DataFrame or Series axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "cumsum",
        "doc": "Return cumulative sum over a DataFrame or Series axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "describe",
        "doc": "Generate descriptive statistics.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "diff",
        "doc": "First discrete difference of element.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "eval",
        "doc": "Evaluate a string describing operations on DataFrame columns.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "kurt",
        "doc": "Return unbiased kurtosis over requested axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "kurtosis",
        "doc": "Return unbiased kurtosis over requested axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "mad",
        "doc": "Return the mean absolute deviation of the values over the requested axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "max",
        "doc": "Return the maximum of the values over the requested axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "mean",
        "doc": "Return the mean of the values over the requested axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "median",
        "doc": "Return the median of the values over the requested axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "min",
        "doc": "Return the minimum of the values over the requested axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "mode",
        "doc": "Get the mode(s) of each element along the selected axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "pct_change",
        "doc": "Percentage change between the current and a prior element.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "prod",
        "doc": "Return the product of the values over the requested axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "product",
        "doc": "Return the product of the values over the requested axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "quantile",
        "doc": "Return values at the given quantile over requested axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "rank",
        "doc": "Compute numerical data ranks (1 through n) along axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "round",
        "doc": "Round a DataFrame to a variable number of decimal places.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "sem",
        "doc": "Return unbiased standard error of the mean over requested axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "skew",
        "doc": "Return unbiased skew over requested axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "sum",
        "doc": "Return the sum of the values over the requested axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "std",
        "doc": "Return sample standard deviation over requested axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "var",
        "doc": "Return unbiased variance over requested axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "nunique",
        "doc": "Count number of distinct elements in specified axis.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "value_counts",
        "doc": "Return a Series containing counts of unique rows in the DataFrame.",
        "category": "Computations / descriptive stats"
    },
    {
        "api": "add_prefix",
        "doc": "Prefix labels with string prefix.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "add_suffix",
        "doc": "Suffix labels with string suffix.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "align",
        "doc": "Align two objects on their axes with the specified join method.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "at_time",
        "doc": "Select values at particular time of day (e.g.  9:30AM).",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "between_time",
        "doc": "Select values between particular times of the day (e.g.  9:00-9:30 AM).",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "drop",
        "doc": "Drop specified labels from rows or columns.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "drop_duplicates",
        "doc": "Return DataFrame with duplicate rows removed.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "duplicated",
        "doc": "Return boolean Series denoting duplicate rows.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "equals",
        "doc": "Test whether two objects contain the same elements.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "filter",
        "doc": "Subset the dataframe rows or columns according to the specified index labels.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "first",
        "doc": "Select initial periods of time series data based on a date offset.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "head",
        "doc": "Return the first n rows.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "idxmax",
        "doc": "Return index of first occurrence of maximum over requested axis.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "idxmin",
        "doc": "Return index of first occurrence of minimum over requested axis.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "last",
        "doc": "Select final periods of time series data based on a date offset.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "reindex",
        "doc": "Conform Series/DataFrame to new index with optional filling logic.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "reindex_like",
        "doc": "Return an object with matching indices as other object.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "rename",
        "doc": "Alter axes labels.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "rename_axis",
        "doc": "Set the name of the axis for the index or columns.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "reset_index",
        "doc": "Reset the index  or a level of it.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "sample",
        "doc": "Return a random sample of items from an axis of object.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "set_axis",
        "doc": "Assign desired index to given axis.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "set_index",
        "doc": "Set the DataFrame index using existing columns.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "tail",
        "doc": "Return the last n rows.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "take",
        "doc": "Return the elements in the given positional indices along an axis.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "truncate",
        "doc": "Truncate a Series or DataFrame before and after some index value.",
        "category": "Reindexing / selection / label manipulation"
    },
    {
        "api": "backfill",
        "doc": "Synonym for DataFrame.fillna() with method='bfill'.",
        "category": "Missing data handling"
    },
    {
        "api": "bfill",
        "doc": "Synonym for DataFrame.fillna() with method='bfill'.",
        "category": "Missing data handling"
    },
    {
        "api": "dropna",
        "doc": "Remove missing values.",
        "category": "Missing data handling"
    },
    {
        "api": "ffill",
        "doc": "Synonym for DataFrame.fillna() with method='ffill'.",
        "category": "Missing data handling"
    },
    {
        "api": "fillna",
        "doc": "Fill NA/NaN values using the specified method.",
        "category": "Missing data handling"
    },
    {
        "api": "interpolate",
        "doc": "Fill NaN values using an interpolation method.",
        "category": "Missing data handling"
    },
    {
        "api": "isna",
        "doc": "Detect missing values.",
        "category": "Missing data handling"
    },
    {
        "api": "isnull",
        "doc": "Detect missing values.",
        "category": "Missing data handling"
    },
    {
        "api": "notna",
        "doc": "Detect existing (non-missing) values.",
        "category": "Missing data handling"
    },
    {
        "api": "notnull",
        "doc": "Detect existing (non-missing) values.",
        "category": "Missing data handling"
    },
    {
        "api": "pad",
        "doc": "Synonym for DataFrame.fillna() with method='ffill'.",
        "category": "Missing data handling"
    },
    {
        "api": "replace",
        "doc": "Replace values given in to_replace with value.",
        "category": "Missing data handling"
    },
    {
        "api": "droplevel",
        "doc": "Return Series/DataFrame with requested index / column level(s) removed.",
        "category": "Reshaping  sorting  transposing"
    },
    {
        "api": "pivot",
        "doc": "Return reshaped DataFrame organized by given index / column values.",
        "category": "Reshaping  sorting  transposing"
    },
    {
        "api": "pivot_table",
        "doc": "Create a spreadsheet-style pivot table as a DataFrame.",
        "category": "Reshaping  sorting  transposing"
    },
    {
        "api": "reorder_levels",
        "doc": "Rearrange index levels using input order.",
        "category": "Reshaping  sorting  transposing"
    },
    {
        "api": "sort_values",
        "doc": "Sort by the values along either axis.",
        "category": "Reshaping  sorting  transposing"
    },
    {
        "api": "sort_index",
        "doc": "Sort object by labels (along an axis).",
        "category": "Reshaping  sorting  transposing"
    },
    {
        "api": "nlargest",
        "doc": "Return the first n rows ordered by columns in descending order.",
        "category": "Reshaping  sorting  transposing"
    },
    {
        "api": "nsmallest",
        "doc": "Return the first n rows ordered by columns in ascending order.",
        "category": "Reshaping  sorting  transposing"
    },
    {
        "api": "swaplevel",
        "doc": "Swap levels i and j in a MultiIndex.",
        "category": "Reshaping  sorting  transposing"
    },
    {
        "api": "stack",
        "doc": "Stack the prescribed level(s) from columns to index.",
        "category": "Reshaping  sorting  transposing"
    },
    {
        "api": "unstack",
        "doc": "Pivot a level of the (necessarily hierarchical) index labels.",
        "category": "Reshaping  sorting  transposing"
    },
    {
        "api": "swapaxes",
        "doc": "Interchange axes and swap values axes appropriately.",
        "category": "Reshaping  sorting  transposing"
    },
    {
        "api": "melt",
        "doc": "Unpivot a DataFrame from wide to long format  optionally leaving identifiers set.",
        "category": "Reshaping  sorting  transposing"
    },
    {
        "api": "explode",
        "doc": "Transform each element of a list-like to a row  replicating index values.",
        "category": "Reshaping  sorting  transposing"
    },
    {
        "api": "squeeze",
        "doc": "Squeeze 1 dimensional axis objects into scalars.",
        "category": "Reshaping  sorting  transposing"
    },
    {
        "api": "to_xarray",
        "doc": "Return an xarray object from the pandas object.",
        "category": "Reshaping  sorting  transposing"
    },
    {
        "api": "transpose",
        "doc": "Transpose index and columns.",
        "category": "Reshaping  sorting  transposing"
    },
    {
        "api": "append",
        "doc": "Append rows of other to the end of caller  returning a new object.",
        "category": "Combining / comparing / joining / merging"
    },
    {
        "api": "assign",
        "doc": "Assign new columns to a DataFrame.",
        "category": "Combining / comparing / joining / merging"
    },
    {
        "api": "compare",
        "doc": "Compare to another DataFrame and show the differences.",
        "category": "Combining / comparing / joining / merging"
    },
    {
        "api": "join",
        "doc": "Join columns of another DataFrame.",
        "category": "Combining / comparing / joining / merging"
    },
    {
        "api": "merge",
        "doc": "Merge DataFrame or named Series objects with a database-style join.",
        "category": "Combining / comparing / joining / merging"
    },
    {
        "api": "update",
        "doc": "Modify in place using non-NA values from another DataFrame.",
        "category": "Combining / comparing / joining / merging"
    },
    {
        "api": "asfreq",
        "doc": "Convert time series to specified frequency.",
        "category": "Time Series-related"
    },
    {
        "api": "asof",
        "doc": "Return the last row(s) without any NaNs before where.",
        "category": "Time Series-related"
    },
    {
        "api": "shift",
        "doc": "Shift index by desired number of periods with an optional time freq.",
        "category": "Time Series-related"
    },
    {
        "api": "slice_shift",
        "doc": "(DEPRECATED) Equivalent to shift without copying data.",
        "category": "Time Series-related"
    },
    {
        "api": "tshift",
        "doc": "(DEPRECATED) Shift the time index  using the indexs frequency if available.",
        "category": "Time Series-related"
    },
    {
        "api": "first_valid_index",
        "doc": "Return index for first non-NA value or None  if no NA value is found.",
        "category": "Time Series-related"
    },
    {
        "api": "last_valid_index",
        "doc": "Return index for last non-NA value or None  if no NA value is found.",
        "category": "Time Series-related"
    },
    {
        "api": "resample",
        "doc": "Resample time-series data.",
        "category": "Time Series-related"
    },
    {
        "api": "to_period",
        "doc": "Convert DataFrame from DatetimeIndex to PeriodIndex.",
        "category": "Time Series-related"
    },
    {
        "api": "to_timestamp",
        "doc": "Cast to DatetimeIndex of timestamps  at beginning of period.",
        "category": "Time Series-related"
    },
    {
        "api": "tz_convert",
        "doc": "Convert tz-aware axis to target time zone.",
        "category": "Time Series-related"
    },
    {
        "api": "tz_localize",
        "doc": "Localize tz-naive index of a Series or DataFrame to target time zone.",
        "category": "Time Series-related"
    },
    {
        "api": "Flags",
        "doc": "Flags that apply to pandas objects.",
        "category": "Flags"
    },
    {
        "api": "attrs",
        "doc": "Dictionary of global attributes of this dataset.",
        "category": "Metadata"
    },
    {
        "api": "plot",
        "doc": "DataFrame plotting accessor and method",
        "category": "Plotting"
    },
    {
        "api": "plot.area",
        "doc": "Draw a stacked area plot.",
        "category": "Plotting"
    },
    {
        "api": "plot.bar",
        "doc": "Vertical bar plot.",
        "category": "Plotting"
    },
    {
        "api": "plot.barh",
        "doc": "Make a horizontal bar plot.",
        "category": "Plotting"
    },
    {
        "api": "plot.box",
        "doc": "Make a box plot of the DataFrame columns.",
        "category": "Plotting"
    },
    {
        "api": "plot.density",
        "doc": "Generate Kernel Density Estimate plot using Gaussian kernels.",
        "category": "Plotting"
    },
    {
        "api": "plot.hexbin",
        "doc": "Generate a hexagonal binning plot.",
        "category": "Plotting"
    },
    {
        "api": "plot.hist",
        "doc": "Draw one histogram of the DataFrames columns.",
        "category": "Plotting"
    },
    {
        "api": "plot.kde",
        "doc": "Generate Kernel Density Estimate plot using Gaussian kernels.",
        "category": "Plotting"
    },
    {
        "api": "plot.line",
        "doc": "Plot Series or DataFrame as lines.",
        "category": "Plotting"
    },
    {
        "api": "plot.pie",
        "doc": "Generate a pie plot.",
        "category": "Plotting"
    },
    {
        "api": "plot.scatter",
        "doc": "Create a scatter plot with varying marker point size and color.",
        "category": "Plotting"
    },
    {
        "api": "boxplot",
        "doc": "Make a box plot from DataFrame columns.",
        "category": "Plotting"
    },
    {
        "api": "hist",
        "doc": "Make a histogram of the DataFrames columns.",
        "category": "Plotting"
    },
    {
        "api": "sparse.density",
        "doc": "Ratio of non-sparse points to total (dense) data points.",
        "category": "Sparse accessor"
    },
    {
        "api": "sparse.from_spmatrix",
        "doc": "Create a new DataFrame from a scipy sparse matrix.",
        "category": "Sparse accessor"
    },
    {
        "api": "sparse.to_coo",
        "doc": "Return the contents of the frame as a sparse SciPy COO matrix.",
        "category": "Sparse accessor"
    },
    {
        "api": "sparse.to_dense",
        "doc": "Convert a DataFrame with sparse values to dense.",
        "category": "Sparse accessor"
    },
    {
        "api": "from_dict",
        "doc": "Construct DataFrame from dict of array-like or dicts.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "from_records",
        "doc": "Convert structured or record ndarray to DataFrame.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "to_parquet",
        "doc": "Write a DataFrame to the binary parquet format.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "to_pickle",
        "doc": "Pickle (serialize) object to file.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "to_csv",
        "doc": "Write object to a comma-separated values (csv) file.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "to_hdf",
        "doc": "Write the contained data to an HDF5 file using HDFStore.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "to_sql",
        "doc": "Write records stored in a DataFrame to a SQL database.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "to_dict",
        "doc": "Convert the DataFrame to a dictionary.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "to_excel",
        "doc": "Write object to an Excel sheet.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "to_json",
        "doc": "Convert the object to a JSON string.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "to_html",
        "doc": "Render a DataFrame as an HTML table.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "to_feather",
        "doc": "Write a DataFrame to the binary Feather format.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "to_latex",
        "doc": "Render object to a LaTeX tabular  longtable  or nested table/tabular.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "to_stata",
        "doc": "Export DataFrame object to Stata dta format.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "to_gbq",
        "doc": "Write a DataFrame to a Google BigQuery table.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "to_records",
        "doc": "Convert DataFrame to a NumPy record array.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "to_string",
        "doc": "Render a DataFrame to a console-friendly tabular output.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "to_clipboard",
        "doc": "Copy object to the system clipboard.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "to_markdown",
        "doc": "Print DataFrame in Markdown-friendly format.",
        "category": "Serialization / IO / conversion"
    },
    {
        "api": "style",
        "doc": "Returns a Styler object.",
        "category": "Serialization / IO / conversion"
    }
]